# -*- coding: utf-8 -*-
"""Class Participation 7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M49QdY3s4qgB2nSFXqsi4TfqMjNuteEH
"""

import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import StandardScaler
import numpy as np
import matplotlib.pyplot as plt
import statsmodels.api as sm
!pip install streamlit

import streamlit as st

df = pd.read_csv('/content/Class Participation Dataset.csv')

st.write("## Step 1: Model Summary")
y = df["Exam Score"]
X = df[["Study Hours", "Practice Tests Taken", "Tutoring Hours", "Sleep Hours", "Caffeine Consumption "]]
X = sm.add_constant(X)
model = sm.OLS(y, X).fit()

model
print (model.summary())

st.write("### Regression Model Summary")
st.write(model.summary())

import pandas as pd
import numpy as np
import statsmodels.api as sm
from sklearn.preprocessing import MinMaxScaler, StandardScaler
!pip install streamlit
import streamlit as st
import matplotlib.pyplot as plt
import  seaborn as sns

tab1, tab2, tab3, tab4, tab5 = st.tabs(['GDP MLR','Production & Manufacturing MLR','Advertisement MLR',"Test MLR","Coffe MLR"])

with tab5:
    st.write("Caffeine MLR")
    df = pd.read_csv('/content/Class Participation Dataset.csv')
    st.write(df)

with tab5:
    st.write("Coffee MLR")
    df = pd.read_csv('/content/Class Participation Dataset.csv')
    print(df)
    st.write(df)

# Columns to standardize using MinMaxScaler
columns_to_standardize = ["Exam Score", "Study Hours", "Practice Tests Taken", "Tutoring Hours", "Sleep Hours", "Caffeine Consumption "]
scaler = StandardScaler()
df[columns_to_standardize] = scaler.fit_transform(df[columns_to_standardize])
st.write("Standardized data")
st.write(df)
print(df)

df1 = df.copy()

y = df["Exam Score"]
X = df[["Study Hours"	,"Practice Tests Taken","Tutoring Hours","Sleep Hours", "Caffeine Consumption "]]
X = sm.add_constant(X)
model = sm.OLS(y, X).fit()
st.write("The Dependent Variable is: Exam Score")
st.write("The Independent Variables are : Study Hours, Practice Tests Taken, Tutoring Hours, Sleep Hours, Caffeine Consumption")
print(model.summary())
st.write(model.summary())

st.write("Sleep Hours")

df = df.drop(["Sleep Hours"], axis=1)

y = df["Exam Score"]
X = df[["Study Hours"	,"Practice Tests Taken","Tutoring Hours", "Caffeine Consumption "]]
X = sm.add_constant(X)
model = sm.OLS(y, X).fit()
print(model.summary())
st.write("The Dependent Variable is: Exam Score")
st.write("Study Hours"	,"Practice Tests Taken","Tutoring Hours","Caffeine Consumption ")
st.write(model.summary())

st.write("Descriptive Stats")

summary_stats = df.describe()
mode_values = df.mode()  # For mode
median_values = df.median()  # For Median
variance_values = df.var()  # For Variance
kurtosis_values = df.kurtosis()  # Kurtosis
skewness_values = df.skew()  # Skewness
min = df.min()  # For minimum
max = df.max()  # For Maximum
sum = df.sum()  # For Sum
count = df.count()  # For Count
st.write(summary_stats)
st.write(mode_values)
st.write(median_values)
st.write(variance_values)
st.write(kurtosis_values)
st.write(skewness_values)

# For correlation Matrix and Heat Map
df1 =df1.drop(["Exam Score"],axis=1)
correlation_matrix = df1.corr()
print(correlation_matrix)
plt.figure(figsize=(5, 3))
sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm")
plt.title("Correlation Matrix")
plt.show()
st.pyplot()

# For pairplot
sns.pairplot(df1)
plt.show()
st.pyplot()

# For Histogram
df1.hist(figsize=(12, 8))
plt.show()
st.pyplot()

# For Box Plot
sns.boxplot(data=df1)
plt.show()
st.pyplot()

